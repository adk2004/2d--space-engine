generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @unique @default(cuid())
  username      String  @unique
  password      String
  avatarId      String?
  role          Role
  mapElements   Map[]
  spaceElements Space[]
  avatar        Avatar? @relation(fields: [avatarId], references: [id])
}

model Space {
  id        String          @id @unique @default(cuid())
  name      String
  width     Int
  height    Int
  thumbnail String?
  creatorId String
  creator   User            @relation(fields: [creatorId], references: [id])
  elements  SpaceElements[]
}

model SpaceElements {
  id        String  @id @unique @default(cuid())
  elementId String
  spaceId   String
  x         Int
  y         Int
  element   Element @relation(fields: [elementId], references: [id])
  space     Space   @relation(fields: [spaceId], references: [id])
}

model Element {
  id       String          @id @unique @default(cuid())
  width    Int
  height   Int
  imageUrl String
  name     String?
  static   Boolean
  maps     MapElements[]
  spaces   SpaceElements[]
}

model Map {
  id        String        @id @unique @default(cuid())
  width     Int
  height    Int
  name      String
  creatorId String
  thumbnail String?
  creator   User          @relation(fields: [creatorId], references: [id])
  elements  MapElements[]
}

model MapElements {
  id        String   @id @unique @default(cuid())
  mapId     String
  elementId String?
  x         Int?
  y         Int?
  element   Element? @relation(fields: [elementId], references: [id])
  map       Map      @relation(fields: [mapId], references: [id])
}

model Avatar {
  id       String @id @unique @default(cuid())
  imageUrl String
  name     String
  users    User[]
}

enum Role {
  Admin
  User
}
